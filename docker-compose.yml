version: '3.8'

services:
  postgres_db:
    image: postgres:14-alpine
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    depends_on:
      postgres_db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - TZ=UTC
    volumes:
      - ./backend:/app
      - uploads_data:/app/uploads
    ports:
      - "${API_PORT}:8000"
    # Fixed command to properly check postgres connection
    command: >
      bash -c "
        # Wait for PostgreSQL to be ready
        until PGPASSWORD=$$DB_PASSWORD psql -h $$DB_HOST -U $$DB_USER -d $$DB_NAME -c 'SELECT 1;'; do
          echo 'Postgres is unavailable - sleeping'
          sleep 1
        done
        
        echo 'Postgres is up - starting application'
        
        # Create database schema if it does not exist
        PGPASSWORD=$$DB_PASSWORD psql -h $$DB_HOST -U $$DB_USER -d $$DB_NAME -c \"
        CREATE TABLE IF NOT EXISTS users (
            user_id SERIAL PRIMARY KEY,
            username VARCHAR(50) UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            email VARCHAR(100) UNIQUE NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_deleted BOOLEAN DEFAULT FALSE
        );

        -- Create default user if not exists
        INSERT INTO users (user_id, username, password_hash, email, is_deleted)
        SELECT 1, 'default', 'defaultpasswordhash', 'default@example.com', false
        WHERE NOT EXISTS (SELECT 1 FROM users WHERE user_id = 1);
        \"
        
        # Now let SQLAlchemy create the rest of the tables
        python -c 'from main import Base, engine; Base.metadata.create_all(engine)'
        
        # Start application
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    environment:
      - REACT_APP_API_URL=${API_URL}
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT}:3000"
    depends_on:
      - backend

volumes:
  postgres_data:
  uploads_data: