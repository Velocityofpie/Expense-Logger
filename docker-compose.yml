version: '3'

services:
  postgres_db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secret}
      - POSTGRES_DB=${DB_NAME:-expense_logger}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - uploads_data:/app/uploads
      - ./backend:/app  # For development hot reload
    depends_on:
      postgres_db:
        condition: service_healthy
    environment:
      - DB_HOST=postgres_db
      - DB_NAME=${DB_NAME:-expense_logger}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-secret}
      - JWT_SECRET=${JWT_SECRET:-default-secret-change-me}
    ports:
      - "8000:8000"
    restart: always
    command: >
      bash -c "
        until pg_isready -h postgres_db -U ${DB_USER:-postgres}; do
          echo 'Waiting for PostgreSQL...'
          sleep 2
        done &&
        python -c 'from main import Base, engine; Base.metadata.create_all(engine)' &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      args:
        - REACT_APP_API_URL=/api
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  uploads_data: